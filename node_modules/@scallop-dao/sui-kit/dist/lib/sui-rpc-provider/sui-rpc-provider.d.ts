import { JsonRpcProvider, DisplayFieldsResponse, ObjectContentFields } from "@mysten/sui.js";
import { NetworkType } from "./default-chain-configs";
type ObjectData = {
    objectId: string;
    objectType: string;
    objectVersion: number;
    objectDisplay: DisplayFieldsResponse;
    objectFields: ObjectContentFields;
};
type Params = {
    fullnodeUrl?: string;
    faucetUrl?: string;
    networkType?: NetworkType;
};
export declare class SuiRpcProvider {
    fullnodeUrl: string;
    faucetUrl: string;
    provider: JsonRpcProvider;
    /**
     *
     * @param networkType, 'testnet' | 'mainnet' | 'devnet' | 'localhost', default is 'devnet'
     * @param fullnodeUrl, the fullnode url, default is the preconfig fullnode url for the given network type
     * @param faucetUrl, the faucet url, default is the preconfig faucet url for the given network type
     */
    constructor({ fullnodeUrl, faucetUrl, networkType }?: Params);
    /**
     * Request some SUI from faucet
     * @Returns {Promise<boolean>}, true if the request is successful, false otherwise.
     */
    requestFaucet(addr: string): Promise<void>;
    getBalance(addr: string, coinType?: string): Promise<{
        coinType: string;
        coinObjectCount: number;
        totalBalance: string;
        lockedBalance: {
            number?: number | undefined;
            epochId?: number | undefined;
        };
    }>;
    getObjects(ids: string[]): Promise<ObjectData[]>;
    /**
     * @description Select coins that add up to the given amount.
     * @param addr the address of the owner
     * @param amount the amount that is needed for the coin
     * @param coinType the coin type, default is '0x2::SUI::SUI'
     */
    selectCoins(addr: string, amount: number, coinType?: string): Promise<{
        objectId: string;
        digest: string;
        version: string;
    }[]>;
}
export {};
