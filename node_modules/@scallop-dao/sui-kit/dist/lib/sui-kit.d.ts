/**
 * @file src.ts
 * @description This file is used to aggregate the tools that used to interact with SUI network.
 * @author IceFox
 * @version 0.1.0
 */
import { RawSigner, TransactionBlock, DevInspectResults, SuiTransactionBlockResponse } from '@mysten/sui.js';
import { SuiAccountManager, DerivePathParams } from "./sui-account-manager";
import { SuiRpcProvider, NetworkType } from './sui-rpc-provider';
import { SuiTxBlock, SuiTxArg, SuiVecTxArg } from "./sui-tx-builder";
export type SuiKitParams = {
    mnemonics?: string;
    secretKey?: string;
    fullnodeUrl?: string;
    faucetUrl?: string;
    networkType?: NetworkType;
};
/**
 * @class SuiKit
 * @description This class is used to aggregate the tools that used to interact with SUI network.
 */
export declare class SuiKit {
    accountManager: SuiAccountManager;
    rpcProvider: SuiRpcProvider;
    /**
     * Support the following ways to init the SuiToolkit:
     * 1. mnemonics
     * 2. secretKey (base64 or hex)
     * If none of them is provided, will generate a random mnemonics with 24 words.
     *
     * @param mnemonics, 12 or 24 mnemonics words, separated by space
     * @param secretKey, base64 or hex string, when mnemonics is provided, secretKey will be ignored
     * @param networkType, 'testnet' | 'mainnet' | 'devnet' | 'localhost', default is 'devnet'
     * @param fullnodeUrl, the fullnode url, default is the preconfig fullnode url for the given network type
     * @param faucetUrl, the faucet url, default is the preconfig faucet url for the given network type
     */
    constructor({ mnemonics, secretKey, networkType, fullnodeUrl, faucetUrl }?: SuiKitParams);
    /**
     * if derivePathParams is not provided or mnemonics is empty, it will return the currentSigner.
     * else:
     * it will generate signer from the mnemonic with the given derivePathParams.
     * @param derivePathParams, such as { accountIndex: 2, isExternal: false, addressIndex: 10 }, comply with the BIP44 standard
     */
    getSigner(derivePathParams?: DerivePathParams): RawSigner;
    /**
     * @description Switch the current account with the given derivePathParams
     * @param derivePathParams, such as { accountIndex: 2, isExternal: false, addressIndex: 10 }, comply with the BIP44 standard
     */
    switchAccount(derivePathParams: DerivePathParams): void;
    /**
     * @description Get the address of the account for the given derivePathParams
     * @param derivePathParams, such as { accountIndex: 2, isExternal: false, addressIndex: 10 }, comply with the BIP44 standard
     */
    getAddress(derivePathParams?: DerivePathParams): string;
    currentAddress(): string;
    provider(): import("@mysten/sui.js").JsonRpcProvider;
    /**
     * Request some SUI from faucet
     * @Returns {Promise<boolean>}, true if the request is successful, false otherwise.
     */
    requestFaucet(derivePathParams?: DerivePathParams): Promise<void>;
    getBalance(coinType?: string, derivePathParams?: DerivePathParams): Promise<{
        coinType: string;
        coinObjectCount: number;
        totalBalance: string;
        lockedBalance: {
            number?: number | undefined;
            epochId?: number | undefined;
        };
    }>;
    getObjects(objectIds: string[]): Promise<{
        objectId: string;
        objectType: string;
        objectVersion: number;
        objectDisplay: {
            data: Record<string, string> | null;
            error: {
                code: string;
                version?: string | undefined;
                digest?: string | undefined;
                error?: string | undefined;
                object_id?: string | undefined;
            } | null;
        };
        objectFields: Record<string, any>;
    }[]>;
    signTxn(tx: Uint8Array | TransactionBlock | SuiTxBlock, derivePathParams?: DerivePathParams): Promise<import("@mysten/sui.js").SignedTransaction>;
    signAndSendTxn(tx: Uint8Array | TransactionBlock | SuiTxBlock, derivePathParams?: DerivePathParams): Promise<SuiTransactionBlockResponse>;
    /**
     * Transfer the given amount of SUI to the recipient
     * @param recipient
     * @param amount
     * @param derivePathParams
     */
    transferSui(recipient: string, amount: number, derivePathParams?: DerivePathParams): Promise<{
        digest: string;
        timestampMs?: string | undefined;
        transaction?: {
            data: {
                sender: string;
                messageVersion: "v1";
                transaction: {
                    epoch: string;
                    storage_charge: string;
                    computation_charge: string;
                    storage_rebate: string;
                    kind: "ChangeEpoch";
                    epoch_start_timestamp_ms?: string | undefined;
                } | {
                    epoch: string;
                    round: string;
                    commit_timestamp_ms: string;
                    kind: "ConsensusCommitPrologue";
                } | {
                    objects: string[];
                    kind: "Genesis";
                } | {
                    transactions: ({
                        MoveCall: {
                            function: string;
                            package: string;
                            module: string;
                            arguments?: ("GasCoin" | {
                                Input: number;
                            } | {
                                Result: number;
                            } | {
                                NestedResult: [number, number];
                            })[] | undefined;
                            type_arguments?: string[] | undefined;
                        };
                    } | {
                        TransferObjects: [("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[], "GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }];
                    } | {
                        SplitCoins: ["GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    } | {
                        MergeCoins: ["GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    } | {
                        Publish: [{
                            disassembled: Record<string, string>;
                        }, string[]];
                    } | {
                        Upgrade: [{
                            disassembled: Record<string, string>;
                        }, string[], string, "GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }];
                    } | {
                        MakeMoveVec: [string | null, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    })[];
                    inputs: ({
                        type: "pure";
                        value: import("@mysten/sui.js").SuiJsonValue;
                        valueType?: string | undefined;
                    } | {
                        type: "object";
                        objectType: "immOrOwnedObject";
                        objectId: string;
                        version: string;
                        digest: string;
                    } | {
                        type: "object";
                        objectType: "sharedObject";
                        objectId: string;
                        initialSharedVersion: string;
                        mutable: boolean;
                    })[];
                    kind: "ProgrammableTransaction";
                };
                gasData: {
                    payment: {
                        objectId: string;
                        version: string | number;
                        digest: string;
                    }[];
                    owner: string;
                    price: string;
                    budget: string;
                };
            };
            txSignatures: string[];
        } | undefined;
        effects?: {
            messageVersion: "v1";
            status: {
                status: "success" | "failure";
                error?: string | undefined;
            };
            executedEpoch: string;
            gasUsed: {
                computationCost: string;
                storageCost: string;
                storageRebate: string;
                nonRefundableStorageFee: string;
            };
            transactionDigest: string;
            gasObject: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            };
            modifiedAtVersions?: {
                objectId: string;
                sequenceNumber: string;
            }[] | undefined;
            sharedObjects?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            created?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            mutated?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            unwrapped?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            deleted?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            unwrapped_then_deleted?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            wrapped?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            eventsDigest?: string | undefined;
            dependencies?: string[] | undefined;
        } | undefined;
        events?: {
            id: {
                txDigest: string;
                eventSeq: string;
            };
            packageId: string;
            transactionModule: string;
            sender: string;
            type: string;
            parsedJson?: Record<string, any> | undefined;
            bcs?: string | undefined;
            timestampMs?: string | undefined;
        }[] | undefined;
        checkpoint?: string | undefined;
        confirmedLocalExecution?: boolean | undefined;
        objectChanges?: ({
            packageId: string;
            type: "published";
            version: string;
            digest: string;
            modules: string[];
        } | {
            sender: string;
            type: "transferred";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            recipient: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
        } | {
            sender: string;
            type: "mutated";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
            previousVersion: string;
        } | {
            sender: string;
            type: "deleted";
            objectType: string;
            objectId: string;
            version: string;
        } | {
            sender: string;
            type: "wrapped";
            objectType: string;
            objectId: string;
            version: string;
        } | {
            sender: string;
            type: "created";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
        })[] | undefined;
        balanceChanges?: {
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
            coinType: string;
            amount: string;
        }[] | undefined;
        errors?: string[] | undefined;
    }>;
    /**
     * Transfer to mutliple recipients
     * @param recipients the recipients addresses
     * @param amounts the amounts of SUI to transfer to each recipient, the length of amounts should be the same as the length of recipients
     * @param derivePathParams
     */
    transferSuiToMany(recipients: string[], amounts: number[], derivePathParams?: DerivePathParams): Promise<{
        digest: string;
        timestampMs?: string | undefined;
        transaction?: {
            data: {
                sender: string;
                messageVersion: "v1";
                transaction: {
                    epoch: string;
                    storage_charge: string;
                    computation_charge: string;
                    storage_rebate: string;
                    kind: "ChangeEpoch";
                    epoch_start_timestamp_ms?: string | undefined;
                } | {
                    epoch: string;
                    round: string;
                    commit_timestamp_ms: string;
                    kind: "ConsensusCommitPrologue";
                } | {
                    objects: string[];
                    kind: "Genesis";
                } | {
                    transactions: ({
                        MoveCall: {
                            function: string;
                            package: string;
                            module: string;
                            arguments?: ("GasCoin" | {
                                Input: number;
                            } | {
                                Result: number;
                            } | {
                                NestedResult: [number, number];
                            })[] | undefined;
                            type_arguments?: string[] | undefined;
                        };
                    } | {
                        TransferObjects: [("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[], "GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }];
                    } | {
                        SplitCoins: ["GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    } | {
                        MergeCoins: ["GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    } | {
                        Publish: [{
                            disassembled: Record<string, string>;
                        }, string[]];
                    } | {
                        Upgrade: [{
                            disassembled: Record<string, string>;
                        }, string[], string, "GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }];
                    } | {
                        MakeMoveVec: [string | null, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    })[];
                    inputs: ({
                        type: "pure";
                        value: import("@mysten/sui.js").SuiJsonValue;
                        valueType?: string | undefined;
                    } | {
                        type: "object";
                        objectType: "immOrOwnedObject";
                        objectId: string;
                        version: string;
                        digest: string;
                    } | {
                        type: "object";
                        objectType: "sharedObject";
                        objectId: string;
                        initialSharedVersion: string;
                        mutable: boolean;
                    })[];
                    kind: "ProgrammableTransaction";
                };
                gasData: {
                    payment: {
                        objectId: string;
                        version: string | number;
                        digest: string;
                    }[];
                    owner: string;
                    price: string;
                    budget: string;
                };
            };
            txSignatures: string[];
        } | undefined;
        effects?: {
            messageVersion: "v1";
            status: {
                status: "success" | "failure";
                error?: string | undefined;
            };
            executedEpoch: string;
            gasUsed: {
                computationCost: string;
                storageCost: string;
                storageRebate: string;
                nonRefundableStorageFee: string;
            };
            transactionDigest: string;
            gasObject: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            };
            modifiedAtVersions?: {
                objectId: string;
                sequenceNumber: string;
            }[] | undefined;
            sharedObjects?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            created?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            mutated?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            unwrapped?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            deleted?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            unwrapped_then_deleted?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            wrapped?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            eventsDigest?: string | undefined;
            dependencies?: string[] | undefined;
        } | undefined;
        events?: {
            id: {
                txDigest: string;
                eventSeq: string;
            };
            packageId: string;
            transactionModule: string;
            sender: string;
            type: string;
            parsedJson?: Record<string, any> | undefined;
            bcs?: string | undefined;
            timestampMs?: string | undefined;
        }[] | undefined;
        checkpoint?: string | undefined;
        confirmedLocalExecution?: boolean | undefined;
        objectChanges?: ({
            packageId: string;
            type: "published";
            version: string;
            digest: string;
            modules: string[];
        } | {
            sender: string;
            type: "transferred";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            recipient: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
        } | {
            sender: string;
            type: "mutated";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
            previousVersion: string;
        } | {
            sender: string;
            type: "deleted";
            objectType: string;
            objectId: string;
            version: string;
        } | {
            sender: string;
            type: "wrapped";
            objectType: string;
            objectId: string;
            version: string;
        } | {
            sender: string;
            type: "created";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
        })[] | undefined;
        balanceChanges?: {
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
            coinType: string;
            amount: string;
        }[] | undefined;
        errors?: string[] | undefined;
    }>;
    /**
     * Transfer the given amounts of coin to multiple recipients
     * @param recipients the list of recipient address
     * @param amounts the amounts to transfer for each recipient
     * @param coinType any custom coin type but not SUI
     * @param derivePathParams the derive path params for the current signer
     */
    transferCoinToMany(recipients: string[], amounts: number[], coinType: string, derivePathParams?: DerivePathParams): Promise<{
        digest: string;
        timestampMs?: string | undefined;
        transaction?: {
            data: {
                sender: string;
                messageVersion: "v1";
                transaction: {
                    epoch: string;
                    storage_charge: string;
                    computation_charge: string;
                    storage_rebate: string;
                    kind: "ChangeEpoch";
                    epoch_start_timestamp_ms?: string | undefined;
                } | {
                    epoch: string;
                    round: string;
                    commit_timestamp_ms: string;
                    kind: "ConsensusCommitPrologue";
                } | {
                    objects: string[];
                    kind: "Genesis";
                } | {
                    transactions: ({
                        MoveCall: {
                            function: string;
                            package: string;
                            module: string;
                            arguments?: ("GasCoin" | {
                                Input: number;
                            } | {
                                Result: number;
                            } | {
                                NestedResult: [number, number];
                            })[] | undefined;
                            type_arguments?: string[] | undefined;
                        };
                    } | {
                        TransferObjects: [("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[], "GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }];
                    } | {
                        SplitCoins: ["GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    } | {
                        MergeCoins: ["GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    } | {
                        Publish: [{
                            disassembled: Record<string, string>;
                        }, string[]];
                    } | {
                        Upgrade: [{
                            disassembled: Record<string, string>;
                        }, string[], string, "GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }];
                    } | {
                        MakeMoveVec: [string | null, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    })[];
                    inputs: ({
                        type: "pure";
                        value: import("@mysten/sui.js").SuiJsonValue;
                        valueType?: string | undefined;
                    } | {
                        type: "object";
                        objectType: "immOrOwnedObject";
                        objectId: string;
                        version: string;
                        digest: string;
                    } | {
                        type: "object";
                        objectType: "sharedObject";
                        objectId: string;
                        initialSharedVersion: string;
                        mutable: boolean;
                    })[];
                    kind: "ProgrammableTransaction";
                };
                gasData: {
                    payment: {
                        objectId: string;
                        version: string | number;
                        digest: string;
                    }[];
                    owner: string;
                    price: string;
                    budget: string;
                };
            };
            txSignatures: string[];
        } | undefined;
        effects?: {
            messageVersion: "v1";
            status: {
                status: "success" | "failure";
                error?: string | undefined;
            };
            executedEpoch: string;
            gasUsed: {
                computationCost: string;
                storageCost: string;
                storageRebate: string;
                nonRefundableStorageFee: string;
            };
            transactionDigest: string;
            gasObject: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            };
            modifiedAtVersions?: {
                objectId: string;
                sequenceNumber: string;
            }[] | undefined;
            sharedObjects?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            created?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            mutated?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            unwrapped?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            deleted?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            unwrapped_then_deleted?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            wrapped?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            eventsDigest?: string | undefined;
            dependencies?: string[] | undefined;
        } | undefined;
        events?: {
            id: {
                txDigest: string;
                eventSeq: string;
            };
            packageId: string;
            transactionModule: string;
            sender: string;
            type: string;
            parsedJson?: Record<string, any> | undefined;
            bcs?: string | undefined;
            timestampMs?: string | undefined;
        }[] | undefined;
        checkpoint?: string | undefined;
        confirmedLocalExecution?: boolean | undefined;
        objectChanges?: ({
            packageId: string;
            type: "published";
            version: string;
            digest: string;
            modules: string[];
        } | {
            sender: string;
            type: "transferred";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            recipient: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
        } | {
            sender: string;
            type: "mutated";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
            previousVersion: string;
        } | {
            sender: string;
            type: "deleted";
            objectType: string;
            objectId: string;
            version: string;
        } | {
            sender: string;
            type: "wrapped";
            objectType: string;
            objectId: string;
            version: string;
        } | {
            sender: string;
            type: "created";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
        })[] | undefined;
        balanceChanges?: {
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
            coinType: string;
            amount: string;
        }[] | undefined;
        errors?: string[] | undefined;
    }>;
    transferCoin(recipient: string, amount: number, coinType: string, derivePathParams?: DerivePathParams): Promise<{
        digest: string;
        timestampMs?: string | undefined;
        transaction?: {
            data: {
                sender: string;
                messageVersion: "v1";
                transaction: {
                    epoch: string;
                    storage_charge: string;
                    computation_charge: string;
                    storage_rebate: string;
                    kind: "ChangeEpoch";
                    epoch_start_timestamp_ms?: string | undefined;
                } | {
                    epoch: string;
                    round: string;
                    commit_timestamp_ms: string;
                    kind: "ConsensusCommitPrologue";
                } | {
                    objects: string[];
                    kind: "Genesis";
                } | {
                    transactions: ({
                        MoveCall: {
                            function: string;
                            package: string;
                            module: string;
                            arguments?: ("GasCoin" | {
                                Input: number;
                            } | {
                                Result: number;
                            } | {
                                NestedResult: [number, number];
                            })[] | undefined;
                            type_arguments?: string[] | undefined;
                        };
                    } | {
                        TransferObjects: [("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[], "GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }];
                    } | {
                        SplitCoins: ["GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    } | {
                        MergeCoins: ["GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    } | {
                        Publish: [{
                            disassembled: Record<string, string>;
                        }, string[]];
                    } | {
                        Upgrade: [{
                            disassembled: Record<string, string>;
                        }, string[], string, "GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }];
                    } | {
                        MakeMoveVec: [string | null, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    })[];
                    inputs: ({
                        type: "pure";
                        value: import("@mysten/sui.js").SuiJsonValue;
                        valueType?: string | undefined;
                    } | {
                        type: "object";
                        objectType: "immOrOwnedObject";
                        objectId: string;
                        version: string;
                        digest: string;
                    } | {
                        type: "object";
                        objectType: "sharedObject";
                        objectId: string;
                        initialSharedVersion: string;
                        mutable: boolean;
                    })[];
                    kind: "ProgrammableTransaction";
                };
                gasData: {
                    payment: {
                        objectId: string;
                        version: string | number;
                        digest: string;
                    }[];
                    owner: string;
                    price: string;
                    budget: string;
                };
            };
            txSignatures: string[];
        } | undefined;
        effects?: {
            messageVersion: "v1";
            status: {
                status: "success" | "failure";
                error?: string | undefined;
            };
            executedEpoch: string;
            gasUsed: {
                computationCost: string;
                storageCost: string;
                storageRebate: string;
                nonRefundableStorageFee: string;
            };
            transactionDigest: string;
            gasObject: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            };
            modifiedAtVersions?: {
                objectId: string;
                sequenceNumber: string;
            }[] | undefined;
            sharedObjects?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            created?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            mutated?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            unwrapped?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            deleted?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            unwrapped_then_deleted?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            wrapped?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            eventsDigest?: string | undefined;
            dependencies?: string[] | undefined;
        } | undefined;
        events?: {
            id: {
                txDigest: string;
                eventSeq: string;
            };
            packageId: string;
            transactionModule: string;
            sender: string;
            type: string;
            parsedJson?: Record<string, any> | undefined;
            bcs?: string | undefined;
            timestampMs?: string | undefined;
        }[] | undefined;
        checkpoint?: string | undefined;
        confirmedLocalExecution?: boolean | undefined;
        objectChanges?: ({
            packageId: string;
            type: "published";
            version: string;
            digest: string;
            modules: string[];
        } | {
            sender: string;
            type: "transferred";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            recipient: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
        } | {
            sender: string;
            type: "mutated";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
            previousVersion: string;
        } | {
            sender: string;
            type: "deleted";
            objectType: string;
            objectId: string;
            version: string;
        } | {
            sender: string;
            type: "wrapped";
            objectType: string;
            objectId: string;
            version: string;
        } | {
            sender: string;
            type: "created";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
        })[] | undefined;
        balanceChanges?: {
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
            coinType: string;
            amount: string;
        }[] | undefined;
        errors?: string[] | undefined;
    }>;
    transferObjects(objects: string[], recipient: string, derivePathParams?: DerivePathParams): Promise<{
        digest: string;
        timestampMs?: string | undefined;
        transaction?: {
            data: {
                sender: string;
                messageVersion: "v1";
                transaction: {
                    epoch: string;
                    storage_charge: string;
                    computation_charge: string;
                    storage_rebate: string;
                    kind: "ChangeEpoch";
                    epoch_start_timestamp_ms?: string | undefined;
                } | {
                    epoch: string;
                    round: string;
                    commit_timestamp_ms: string;
                    kind: "ConsensusCommitPrologue";
                } | {
                    objects: string[];
                    kind: "Genesis";
                } | {
                    transactions: ({
                        MoveCall: {
                            function: string;
                            package: string;
                            module: string;
                            arguments?: ("GasCoin" | {
                                Input: number;
                            } | {
                                Result: number;
                            } | {
                                NestedResult: [number, number];
                            })[] | undefined;
                            type_arguments?: string[] | undefined;
                        };
                    } | {
                        TransferObjects: [("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[], "GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }];
                    } | {
                        SplitCoins: ["GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    } | {
                        MergeCoins: ["GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    } | {
                        Publish: [{
                            disassembled: Record<string, string>;
                        }, string[]];
                    } | {
                        Upgrade: [{
                            disassembled: Record<string, string>;
                        }, string[], string, "GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }];
                    } | {
                        MakeMoveVec: [string | null, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    })[];
                    inputs: ({
                        type: "pure";
                        value: import("@mysten/sui.js").SuiJsonValue;
                        valueType?: string | undefined;
                    } | {
                        type: "object";
                        objectType: "immOrOwnedObject";
                        objectId: string;
                        version: string;
                        digest: string;
                    } | {
                        type: "object";
                        objectType: "sharedObject";
                        objectId: string;
                        initialSharedVersion: string;
                        mutable: boolean;
                    })[];
                    kind: "ProgrammableTransaction";
                };
                gasData: {
                    payment: {
                        objectId: string;
                        version: string | number;
                        digest: string;
                    }[];
                    owner: string;
                    price: string;
                    budget: string;
                };
            };
            txSignatures: string[];
        } | undefined;
        effects?: {
            messageVersion: "v1";
            status: {
                status: "success" | "failure";
                error?: string | undefined;
            };
            executedEpoch: string;
            gasUsed: {
                computationCost: string;
                storageCost: string;
                storageRebate: string;
                nonRefundableStorageFee: string;
            };
            transactionDigest: string;
            gasObject: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            };
            modifiedAtVersions?: {
                objectId: string;
                sequenceNumber: string;
            }[] | undefined;
            sharedObjects?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            created?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            mutated?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            unwrapped?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            deleted?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            unwrapped_then_deleted?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            wrapped?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            eventsDigest?: string | undefined;
            dependencies?: string[] | undefined;
        } | undefined;
        events?: {
            id: {
                txDigest: string;
                eventSeq: string;
            };
            packageId: string;
            transactionModule: string;
            sender: string;
            type: string;
            parsedJson?: Record<string, any> | undefined;
            bcs?: string | undefined;
            timestampMs?: string | undefined;
        }[] | undefined;
        checkpoint?: string | undefined;
        confirmedLocalExecution?: boolean | undefined;
        objectChanges?: ({
            packageId: string;
            type: "published";
            version: string;
            digest: string;
            modules: string[];
        } | {
            sender: string;
            type: "transferred";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            recipient: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
        } | {
            sender: string;
            type: "mutated";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
            previousVersion: string;
        } | {
            sender: string;
            type: "deleted";
            objectType: string;
            objectId: string;
            version: string;
        } | {
            sender: string;
            type: "wrapped";
            objectType: string;
            objectId: string;
            version: string;
        } | {
            sender: string;
            type: "created";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
        })[] | undefined;
        balanceChanges?: {
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
            coinType: string;
            amount: string;
        }[] | undefined;
        errors?: string[] | undefined;
    }>;
    moveCall(callParams: {
        target: string;
        arguments?: (SuiTxArg | SuiVecTxArg)[];
        typeArguments?: string[];
        derivePathParams?: DerivePathParams;
    }): Promise<{
        digest: string;
        timestampMs?: string | undefined;
        transaction?: {
            data: {
                sender: string;
                messageVersion: "v1";
                transaction: {
                    epoch: string;
                    storage_charge: string;
                    computation_charge: string;
                    storage_rebate: string;
                    kind: "ChangeEpoch";
                    epoch_start_timestamp_ms?: string | undefined;
                } | {
                    epoch: string;
                    round: string;
                    commit_timestamp_ms: string;
                    kind: "ConsensusCommitPrologue";
                } | {
                    objects: string[];
                    kind: "Genesis";
                } | {
                    transactions: ({
                        MoveCall: {
                            function: string;
                            package: string;
                            module: string;
                            arguments?: ("GasCoin" | {
                                Input: number;
                            } | {
                                Result: number;
                            } | {
                                NestedResult: [number, number];
                            })[] | undefined;
                            type_arguments?: string[] | undefined;
                        };
                    } | {
                        TransferObjects: [("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[], "GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }];
                    } | {
                        SplitCoins: ["GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    } | {
                        MergeCoins: ["GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    } | {
                        Publish: [{
                            disassembled: Record<string, string>;
                        }, string[]];
                    } | {
                        Upgrade: [{
                            disassembled: Record<string, string>;
                        }, string[], string, "GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }];
                    } | {
                        MakeMoveVec: [string | null, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    })[];
                    inputs: ({
                        type: "pure";
                        value: import("@mysten/sui.js").SuiJsonValue;
                        valueType?: string | undefined;
                    } | {
                        type: "object";
                        objectType: "immOrOwnedObject";
                        objectId: string;
                        version: string;
                        digest: string;
                    } | {
                        type: "object";
                        objectType: "sharedObject";
                        objectId: string;
                        initialSharedVersion: string;
                        mutable: boolean;
                    })[];
                    kind: "ProgrammableTransaction";
                };
                gasData: {
                    payment: {
                        objectId: string;
                        version: string | number;
                        digest: string;
                    }[];
                    owner: string;
                    price: string;
                    budget: string;
                };
            };
            txSignatures: string[];
        } | undefined;
        effects?: {
            messageVersion: "v1";
            status: {
                status: "success" | "failure";
                error?: string | undefined;
            };
            executedEpoch: string;
            gasUsed: {
                computationCost: string;
                storageCost: string;
                storageRebate: string;
                nonRefundableStorageFee: string;
            };
            transactionDigest: string;
            gasObject: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            };
            modifiedAtVersions?: {
                objectId: string;
                sequenceNumber: string;
            }[] | undefined;
            sharedObjects?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            created?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            mutated?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            unwrapped?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            deleted?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            unwrapped_then_deleted?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            wrapped?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            eventsDigest?: string | undefined;
            dependencies?: string[] | undefined;
        } | undefined;
        events?: {
            id: {
                txDigest: string;
                eventSeq: string;
            };
            packageId: string;
            transactionModule: string;
            sender: string;
            type: string;
            parsedJson?: Record<string, any> | undefined;
            bcs?: string | undefined;
            timestampMs?: string | undefined;
        }[] | undefined;
        checkpoint?: string | undefined;
        confirmedLocalExecution?: boolean | undefined;
        objectChanges?: ({
            packageId: string;
            type: "published";
            version: string;
            digest: string;
            modules: string[];
        } | {
            sender: string;
            type: "transferred";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            recipient: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
        } | {
            sender: string;
            type: "mutated";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
            previousVersion: string;
        } | {
            sender: string;
            type: "deleted";
            objectType: string;
            objectId: string;
            version: string;
        } | {
            sender: string;
            type: "wrapped";
            objectType: string;
            objectId: string;
            version: string;
        } | {
            sender: string;
            type: "created";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
        })[] | undefined;
        balanceChanges?: {
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
            coinType: string;
            amount: string;
        }[] | undefined;
        errors?: string[] | undefined;
    }>;
    /**
     * Select coins with the given amount and coin type, the total amount is greater than or equal to the given amount
     * @param amount
     * @param coinType
     * @param owner
     */
    selectCoinsWithAmount(amount: number, coinType: string, owner?: string): Promise<string[]>;
    /**
     * stake the given amount of SUI to the validator
     * @param amount the amount of SUI to stake
     * @param validatorAddr the validator address
     * @param derivePathParams the derive path params for the current signer
     */
    stakeSui(amount: number, validatorAddr: string, derivePathParams?: DerivePathParams): Promise<{
        digest: string;
        timestampMs?: string | undefined;
        transaction?: {
            data: {
                sender: string;
                messageVersion: "v1";
                transaction: {
                    epoch: string;
                    storage_charge: string;
                    computation_charge: string;
                    storage_rebate: string;
                    kind: "ChangeEpoch";
                    epoch_start_timestamp_ms?: string | undefined;
                } | {
                    epoch: string;
                    round: string;
                    commit_timestamp_ms: string;
                    kind: "ConsensusCommitPrologue";
                } | {
                    objects: string[];
                    kind: "Genesis";
                } | {
                    transactions: ({
                        MoveCall: {
                            function: string;
                            package: string;
                            module: string;
                            arguments?: ("GasCoin" | {
                                Input: number;
                            } | {
                                Result: number;
                            } | {
                                NestedResult: [number, number];
                            })[] | undefined;
                            type_arguments?: string[] | undefined;
                        };
                    } | {
                        TransferObjects: [("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[], "GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }];
                    } | {
                        SplitCoins: ["GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    } | {
                        MergeCoins: ["GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    } | {
                        Publish: [{
                            disassembled: Record<string, string>;
                        }, string[]];
                    } | {
                        Upgrade: [{
                            disassembled: Record<string, string>;
                        }, string[], string, "GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }];
                    } | {
                        MakeMoveVec: [string | null, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    })[];
                    inputs: ({
                        type: "pure";
                        value: import("@mysten/sui.js").SuiJsonValue;
                        valueType?: string | undefined;
                    } | {
                        type: "object";
                        objectType: "immOrOwnedObject";
                        objectId: string;
                        version: string;
                        digest: string;
                    } | {
                        type: "object";
                        objectType: "sharedObject";
                        objectId: string;
                        initialSharedVersion: string;
                        mutable: boolean;
                    })[];
                    kind: "ProgrammableTransaction";
                };
                gasData: {
                    payment: {
                        objectId: string;
                        version: string | number;
                        digest: string;
                    }[];
                    owner: string;
                    price: string;
                    budget: string;
                };
            };
            txSignatures: string[];
        } | undefined;
        effects?: {
            messageVersion: "v1";
            status: {
                status: "success" | "failure";
                error?: string | undefined;
            };
            executedEpoch: string;
            gasUsed: {
                computationCost: string;
                storageCost: string;
                storageRebate: string;
                nonRefundableStorageFee: string;
            };
            transactionDigest: string;
            gasObject: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            };
            modifiedAtVersions?: {
                objectId: string;
                sequenceNumber: string;
            }[] | undefined;
            sharedObjects?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            created?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            mutated?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            unwrapped?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            deleted?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            unwrapped_then_deleted?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            wrapped?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            eventsDigest?: string | undefined;
            dependencies?: string[] | undefined;
        } | undefined;
        events?: {
            id: {
                txDigest: string;
                eventSeq: string;
            };
            packageId: string;
            transactionModule: string;
            sender: string;
            type: string;
            parsedJson?: Record<string, any> | undefined;
            bcs?: string | undefined;
            timestampMs?: string | undefined;
        }[] | undefined;
        checkpoint?: string | undefined;
        confirmedLocalExecution?: boolean | undefined;
        objectChanges?: ({
            packageId: string;
            type: "published";
            version: string;
            digest: string;
            modules: string[];
        } | {
            sender: string;
            type: "transferred";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            recipient: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
        } | {
            sender: string;
            type: "mutated";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
            previousVersion: string;
        } | {
            sender: string;
            type: "deleted";
            objectType: string;
            objectId: string;
            version: string;
        } | {
            sender: string;
            type: "wrapped";
            objectType: string;
            objectId: string;
            version: string;
        } | {
            sender: string;
            type: "created";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
        })[] | undefined;
        balanceChanges?: {
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
            coinType: string;
            amount: string;
        }[] | undefined;
        errors?: string[] | undefined;
    }>;
    /**
     * Execute the transaction with on-chain data but without really submitting. Useful for querying the effects of a transaction.
     * Since the transaction is not submitted, its gas cost is not charged.
     * @param tx the transaction to execute
     * @param derivePathParams the derive path params
     * @returns the effects and events of the transaction, such as object changes, gas cost, event emitted.
     */
    inspectTxn(tx: Uint8Array | TransactionBlock | SuiTxBlock, derivePathParams?: DerivePathParams): Promise<DevInspectResults>;
}
